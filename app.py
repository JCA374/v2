import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
import streamlit as st
import time
import json
import os
import base64
from urllib.parse import quote, unquote

from strategy import ValueMomentumStrategy
from watchlist import MultiWatchlistManager  # Updated import
from helpers import create_results_table, get_index_constituents


def create_streamlit_app():
    st.set_page_config(
        page_title="V칛rde & Momentum Aktiestrategi",
        page_icon="游늳",
        layout="wide"
    )

    st.title("V칛rde & Momentum Aktiestrategi")

    # Check URL parameters for shared watchlist
    query_params = st.query_params
    has_shared_watchlist = "shared_watchlist" in query_params

    # Initiera strategiklassen och watchlist manager
    strategy = ValueMomentumStrategy()
    watchlist_manager = MultiWatchlistManager()  # Updated to use MultiWatchlistManager

    # Handle importing shared watchlist if present in URL
    if has_shared_watchlist:
        encoded_data = query_params["shared_watchlist"][0]
        imported_index = watchlist_manager.import_from_share_link(encoded_data)
        if imported_index is not None:
            watchlist_manager.set_active_watchlist(imported_index)
            st.success("Importerad watchlist fr친n delad l칛nk!")
            # Clear the parameter after import to avoid reimporting on refresh
            st.query_params.clear()

    # Skapa sessionsvariabel f칬r analysresultat om den inte finns
    if 'analysis_results' not in st.session_state:
        st.session_state.analysis_results = []

    # Skapa UI-sektioner
    tab1, tab2 = st.tabs(["Watchlist & Batch Analysis", "Enskild Aktieanalys"])

    # Tab 1 - Watchlist & Batch analysis
    with tab1:
        col1, col2 = st.columns([1, 3])

        with col1:
            # Watchlist selector and management
            st.subheader("Mina Watchlists")
            
            # Dropdown to select active watchlist
            all_watchlists = watchlist_manager.get_all_watchlists()
            watchlist_names = [w["name"] for w in all_watchlists]
            current_index = watchlist_manager.get_active_watchlist_index()
            
            col_ws1, col_ws2 = st.columns([3, 1])
            
            with col_ws1:
                selected_watchlist = st.selectbox(
                    "V칛lj watchlist",
                    options=range(len(watchlist_names)),
                    format_func=lambda i: watchlist_names[i],
                    index=current_index
                )
                
                if selected_watchlist != current_index:
                    watchlist_manager.set_active_watchlist(selected_watchlist)
                    st.rerun()
            
            with col_ws2:
                if st.button("+ Ny", key="add_new_watchlist"):
                    new_index = watchlist_manager.add_watchlist()
                    watchlist_manager.set_active_watchlist(new_index)
                    st.rerun()
            
            # Watchlist management (rename, delete, share)
            with st.expander("Hantera watchlist"):
                active_watchlist = watchlist_manager.get_active_watchlist()
                
                # Rename watchlist
                new_name = st.text_input("Nytt namn", value=active_watchlist["name"])
                if st.button("Byt namn"):
                    if watchlist_manager.rename_watchlist(current_index, new_name):
                        st.success(f"Bytte namn till {new_name}")
                        st.rerun()
                    else:
                        st.error("Kunde inte byta namn")
                
                # Delete watchlist
                if len(all_watchlists) > 1:  # Only show delete if there's more than one watchlist
                    if st.button("Ta bort denna watchlist", key="delete_watchlist"):
                        if watchlist_manager.delete_watchlist(current_index):
                            st.success("Watchlist borttagen")
                            st.rerun()
                        else:
                            st.error("Kunde inte ta bort watchlist")
                
                # Share watchlist
                st.subheader("Dela watchlist")
                active_watchlist = watchlist_manager.get_active_watchlist()
                share_export_tab1, share_export_tab2 = st.tabs(["Delningsl칛nk", "JSON Export"])
                
                with share_export_tab1:
                    share_link = watchlist_manager.generate_share_link()
                    
                    if share_link:
                        # Get the base URL from the browser
                        st.markdown("Kopiera denna l칛nk f칬r att dela din watchlist:")
                        st.code(share_link, language=None)
                        
                        # Use JavaScript to help with copying
                        copy_js = f"""
                        <script>
                        function copyShareLink() {{
                            const text = '{share_link}';
                            navigator.clipboard.writeText(window.location.origin + window.location.pathname + text)
                                .then(() => alert('L칛nk kopierad!'))
                                .catch(err => alert('Kunde inte kopiera: ' + err));
                        }}
                        </script>
                        <button onclick="copyShareLink()" style="background-color:#4CAF50;color:white;padding:8px 16px;border:none;border-radius:4px;cursor:pointer;">Kopiera delningsl칛nk</button>
                        """
                        st.markdown(copy_js, unsafe_allow_html=True)
                
                with share_export_tab2:
                    json_data = watchlist_manager.export_watchlist()
                    if json_data:
                        st.markdown("Kopiera denna JSON kod f칬r att dela din watchlist:")
                        st.code(json_data, language="json")
                        
                        # Use JavaScript to help with copying
                        copy_js = f"""
                        <script>
                        function copyJsonCode() {{
                            const text = {json.dumps(json_data)};
                            navigator.clipboard.writeText(text)
                                .then(() => alert('JSON kopierad!'))
                                .catch(err => alert('Kunde inte kopiera: ' + err));
                        }}
                        </script>
                        <button onclick="copyJsonCode()" style="background-color:#4CAF50;color:white;padding:8px 16px;border:none;border-radius:4px;cursor:pointer;">Kopiera JSON</button>
                        """
                        st.markdown(copy_js, unsafe_allow_html=True)
                
                # Import watchlist
                st.subheader("Importera watchlist")
                import_tab1, import_tab2 = st.tabs(["Fr친n l칛nk", "Fr친n JSON"])
                
                with import_tab1:
                    import_link = st.text_input("Klistra in delningsl칛nk eller kod", key="import_link")
                    
                    if st.button("Importera fr친n l칛nk"):
                        try:
                            # Clean up the input to handle various formats
                            if "shared_watchlist=" in import_link:
                                # Extract the parameter from a full URL or just the query string
                                parts = import_link.split("shared_watchlist=")
                                if len(parts) > 1:
                                    encoded_data = parts[1].split("&")[0]  # Handle additional params
                                    imported_index = watchlist_manager.import_from_share_link(encoded_data)
                                    
                                    if imported_index is not None:
                                        watchlist_manager.set_active_watchlist(imported_index)
                                        st.success("Watchlist importerad fr친n l칛nk!")
                                        st.rerun()
                                    else:
                                        st.error("Kunde inte importera watchlist fr친n l칛nk")
                                else:
                                    st.error("Ogiltig delningsl칛nk format")
                            else:
                                st.error("Ingen giltig delningsl칛nk hittades")
                        except Exception as e:
                            st.error(f"Fel vid import: {str(e)}")
                
                with import_tab2:
                    import_json = st.text_area("Klistra in JSON data", key="import_json")
                    
                    if st.button("Importera fr친n JSON"):
                        try:
                            if import_json:
                                imported_index = watchlist_manager.import_watchlist(import_json)
                                
                                if imported_index is not None:
                                    watchlist_manager.set_active_watchlist(imported_index)
                                    st.success("Watchlist importerad fr친n JSON!")
                                    st.rerun()
                                else:
                                    st.error("Kunde inte importera watchlist fr친n JSON")
                            else:
                                st.error("Ingen JSON data angiven")
                        except Exception as e:
                            st.error(f"Fel vid import: {str(e)}")

            # Display current watchlist contents
            st.subheader(f"Aktier i {active_watchlist['name']}")

            # Visa watchlist
            watchlist = watchlist_manager.get_watchlist()

            # Visa vald indexlista f칬r snabb-till칛gg
            st.subheader("L칛gg till fr친n Index")
            index_choice = st.selectbox(
                "V칛lj index",
                ["OMXS30", "S&P 500 Top 30", "Dow Jones"]
            )

            index_stocks = get_index_constituents(index_choice)
            selected_index_stocks = st.multiselect(
                "V칛lj aktier att l칛gga till",
                [s for s in index_stocks if s not in watchlist]
            )

            if st.button("L칛gg till valda"):
                for ticker in selected_index_stocks:
                    watchlist_manager.add_stock(ticker)
                st.success(
                    f"Lade till {len(selected_index_stocks)} aktier till watchlist")
                # Uppdatera watchlist
                watchlist = watchlist_manager.get_watchlist()

            # Manuellt l칛gga till aktie
            st.subheader("L칛gg till manuellt")
            new_ticker = st.text_input("Ticker (t.ex. AAPL, ERIC-B.ST)")

            col1_1, col1_2 = st.columns(2)
            with col1_1:
                if st.button("L칛gg till"):
                    if watchlist_manager.add_stock(new_ticker):
                        st.success(f"Lade till {new_ticker}")
                        # Uppdatera watchlist
                        watchlist = watchlist_manager.get_watchlist()
                    else:
                        st.error("Kunde inte l칛gga till aktien")

            # Lista alla aktier i watchlist med remove-knappar
            st.subheader("Hantera Aktier")
            for ticker in watchlist:
                col_a, col_b = st.columns([3, 1])
                with col_a:
                    st.write(ticker)
                with col_b:
                    if st.button("Ta bort", key=f"remove_{ticker}"):
                        watchlist_manager.remove_stock(ticker)
                        st.success(f"Tog bort {ticker}")
                        # Uppdatera sidan f칬r att visa 칛ndringen
                        st.rerun()

            # Knapp f칬r att k칬ra batch-analys p친 hela watchlist
            if watchlist:
                if st.button("Analysera alla", key="analyze_all"):
                    progress_bar = st.progress(0)
                    status_text = st.empty()

                    # Callback f칬r progress
                    def update_progress(progress, text):
                        progress_bar.progress(progress)
                        status_text.text(text)

                    # K칬r batch-analys
                    results = strategy.batch_analyze(
                        watchlist, update_progress)
                    st.session_state.analysis_results = results

                    # Ta bort progress n칛r klar
                    progress_bar.empty()
                    status_text.empty()

                    st.success("Analys klar!")
            else:
                st.info(
                    "L칛gg till aktier i din watchlist f칬r att kunna analysera dem")

        with col2:
            st.subheader("Analysresultat")

            # Visa resultaten i en tabell om de finns
            if st.session_state.analysis_results:
                results_df = create_results_table(
                    st.session_state.analysis_results)

                # Filter options
                st.subheader("Filtrera resultat")
                col_a, col_b, col_c = st.columns(3)

                with col_a:
                    signal_filter = st.multiselect(
                        "Signal",
                        ["K칐P", "H칀LL", "S츿LJ"],
                        default=["K칐P", "H칀LL", "S츿LJ"]
                    )

                with col_b:
                    ma40_filter = st.checkbox(
                        "Bara aktier 칬ver MA40", value=False)

                with col_c:
                    tech_score_min = st.slider("Min Tech Score", 0, 100, 0)

                # Applicera filter
                filtered_df = results_df.copy()

                if signal_filter:
                    filtered_df = filtered_df[filtered_df["Signal"].isin(
                        signal_filter)]

                if ma40_filter:
                    filtered_df = filtered_df[filtered_df["칐ver MA40"] == "Ja"]

                filtered_df = filtered_df[filtered_df["Tech Score"]
                                          >= tech_score_min]

                # Visa filtrerad tabell
                if not filtered_df.empty:
                    # Sortera efter Tech Score och Signal
                    filtered_df = filtered_df.sort_values(
                        by=["Tech Score", "Signal"], ascending=[False, True])

                    # Formatera tabellen
                    st.dataframe(
                        filtered_df,
                        column_config={
                            "Signal": st.column_config.Column(
                                "Signal",
                                help="K칬p, S칛lj eller H친ll signal baserat p친 strategin",
                                width="small"
                            ),
                            "Tech Score": st.column_config.ProgressColumn(
                                "Tech Score",
                                help="Tekniskt score 0-100",
                                min_value=0,
                                max_value=100,
                                format="%d"
                            )
                        },
                        use_container_width=True,
                        hide_index=True
                    )
                else:
                    st.info("Inga aktier matchar valda filter")

                # M칬jlighet att v칛lja en aktie f칬r djupare analys
                if not filtered_df.empty:
                    st.subheader("V칛lj aktie f칬r detaljerad analys")
                    selected_ticker = st.selectbox(
                        "Aktie",
                        filtered_df["Ticker"].tolist()
                    )

                    if selected_ticker:
                        # Hitta analys f칬r vald aktie
                        selected_analysis = next(
                            (r for r in st.session_state.analysis_results if r["ticker"] == selected_ticker),
                            None
                        )

                        if selected_analysis and "error" not in selected_analysis:
                            # Visa diagram
                            st.subheader(
                                f"{selected_analysis['name']} ({selected_analysis['ticker']})")
                            fig = strategy.plot_analysis(selected_analysis)
                            if fig:
                                st.pyplot(fig)

                            # Visa detaljer i expanderbart f칛lt
                            with st.expander("Visa detaljer"):
                                col_x, col_y = st.columns(2)

                                with col_x:
                                    st.subheader("Fundamentala Data")
                                    st.write(
                                        f"L칬nsamt bolag: {'Ja' if selected_analysis['is_profitable'] else 'Nej'}")
                                    st.write(
                                        f"P/E-tal: {selected_analysis['pe_ratio']:.2f}" if selected_analysis['pe_ratio'] else "P/E-tal: Data saknas")
                                    st.write(
                                        f"Oms칛ttningstillv칛xt: {selected_analysis['revenue_growth']*100:.1f}%" if selected_analysis['revenue_growth'] else "Oms칛ttningstillv칛xt: Data saknas")
                                    st.write(
                                        f"Vinstmarginal: {selected_analysis['profit_margin']*100:.1f}%" if selected_analysis['profit_margin'] else "Vinstmarginal: Data saknas")
                                    st.write(
                                        f"Vinstutveckling: {selected_analysis['earnings_trend']}")

                                with col_y:
                                    st.subheader("Tekniska Indikatorer")
                                    st.write(
                                        f"Pris 칬ver MA40 (40-veckor): {'Ja' if selected_analysis['above_ma40'] else 'Nej'}")
                                    st.write(
                                        f"Pris 칬ver MA4 (4-veckor): {'Ja' if selected_analysis['above_ma4'] else 'Nej'}")
                                    st.write(
                                        f"RSI 칬ver 50: {'Ja' if selected_analysis['rsi_above_50'] else 'Nej'}")
                                    st.write(
                                        f"H칬gre bottnar: {'Ja' if selected_analysis['higher_lows'] else 'Nej'}")
                                    st.write(
                                        f"N칛ra 52-veckors h칬gsta: {'Ja' if selected_analysis['near_52w_high'] else 'Nej'}")
                                    st.write(
                                        f"Breakout fr친n konsolidering: {'Ja' if selected_analysis['breakout'] else 'Nej'}")
            else:
                st.info("Klicka p친 'Analysera alla' f칬r att se resultat")

    # Tab 2 - Enskild aktieanalys
    with tab2:
        st.sidebar.header("Akties칬k")
        ticker = st.sidebar.text_input(
            "Aktiesymbol (t.ex. AAPL, ERIC-B.ST)", "AAPL")

        if st.sidebar.button("Analysera"):
            with st.spinner(f"Analyserar {ticker}..."):
                analysis = strategy.analyze_stock(ticker)

                if "error" in analysis:
                    st.error(f"Fel: {analysis['error']}")
                else:
                    # Visa sammanfattning
                    signal_color = "green" if analysis["buy_signal"] else "red" if analysis["sell_signal"] else "orange"
                    signal_text = "K칐P" if analysis["buy_signal"] else "S츿LJ" if analysis["sell_signal"] else "H칀LL"

                    st.header(f"{analysis['name']} ({analysis['ticker']})")
                    st.subheader(f"Pris: {analysis['price']:.2f} SEK")

                    st.markdown(
                        f"<h3 style='color:{signal_color}'>Signal: {signal_text}</h3>", unsafe_allow_html=True)

                    # Show watchlist options - updated to allow adding to any watchlist
                    st.subheader("L칛gg till i watchlist")
                    
                    # Create a radio button to select which watchlist to add to
                    all_watchlists = watchlist_manager.get_all_watchlists()
                    watchlist_names = [w["name"] for w in all_watchlists]
                    
                    target_watchlist = st.radio(
                        "V칛lj watchlist",
                        options=range(len(watchlist_names)),
                        format_func=lambda i: watchlist_names[i],
                        horizontal=True
                    )
                    
                    if st.button("L칛gg till i watchlist"):
                        if watchlist_manager.add_stock_to_watchlist(target_watchlist, analysis["ticker"]):
                            st.success(
                                f"Lade till {analysis['ticker']} i {watchlist_names[target_watchlist]}")
                        else:
                            st.error("Kunde inte l칛gga till aktien (finns redan eller ogiltigt namn)")

                    # Skapa flikar f칬r detaljer
                    tab2_1, tab2_2, tab2_3 = st.tabs(
                        ["칐versikt", "Fundamenta", "Teknisk Analys"])

                    with tab2_1:
                        # Visa diagram
                        fig = strategy.plot_analysis(analysis)
                        if fig:
                            st.pyplot(fig)

                        # Visa kort sammanfattning
                        st.subheader("Sammanfattning")
                        st.write(f"Datum f칬r analys: {analysis['date']}")
                        st.write(
                            "Fundamentala kriterier uppfyllda" if analysis["fundamental_check"] else "Fundamentala kriterier EJ uppfyllda")
                        st.write(
                            "Tekniska kriterier uppfyllda" if analysis["technical_check"] else "Tekniska kriterier EJ uppfyllda")
                        st.write(f"Tech Score: {analysis['tech_score']}/100")

                    with tab2_2:
                        st.subheader("Fundamentala Data")
                        st.write(
                            f"L칬nsamt bolag: {'Ja' if analysis['is_profitable'] else 'Nej'}")
                        st.write(
                            f"P/E-tal: {analysis['pe_ratio']:.2f}" if analysis['pe_ratio'] else "P/E-tal: Data saknas")
                        st.write(
                            f"Oms칛ttningstillv칛xt: {analysis['revenue_growth']*100:.1f}%" if analysis['revenue_growth'] else "Oms칛ttningstillv칛xt: Data saknas")
                        st.write(
                            f"Vinstmarginal: {analysis['profit_margin']*100:.1f}%" if analysis['profit_margin'] else "Vinstmarginal: Data saknas")
                        st.write(
                            f"Vinstutveckling: {analysis['earnings_trend']}")

                    with tab2_3:
                        st.subheader("Tekniska Indikatorer")
                        st.write(
                            f"Pris 칬ver MA40 (40-veckor): {'Ja' if analysis['above_ma40'] else 'Nej'}")
                        st.write(
                            f"Pris 칬ver MA4 (4-veckor): {'Ja' if analysis['above_ma4'] else 'Nej'}")
                        st.write(
                            f"RSI 칬ver 50: {'Ja' if analysis['rsi_above_50'] else 'Nej'}")
                        st.write(
                            f"H칬gre bottnar: {'Ja' if analysis['higher_lows'] else 'Nej'}")
                        st.write(
                            f"N칛ra 52-veckors h칬gsta: {'Ja' if analysis['near_52w_high'] else 'Nej'}")
                        st.write(
                            f"Breakout fr친n konsolidering: {'Ja' if analysis['breakout'] else 'Nej'}")

    # Visa information om strategin
    with st.sidebar.expander("Om V칛rde & Momentum-strategin"):
        st.write("""
        **V칛rde & Momentum-strategin** kombinerar fundamentala och tekniska kriterier f칬r aktier:
        
        **Fundamentala kriterier:**
        * Bolaget ska tj칛na pengar
        * Bolaget ska 칬ka oms칛ttning och vinst, eller 칬ka oms칛ttning med stabil vinstmarginal
        * Bolaget ska handlas till ett rimligt P/E-tal j칛mf칬rt med sig sj칛lv
        
        **Tekniska kriterier:**
        * Bolaget ska s칛tta h칬gre bottnar
        * Bolaget ska handlas 칬ver MA40 (veckovis) och g칛rna MA4 f칬r extra momentum
        * Bolaget ska ha ett RSI 칬ver 50
        * Starkt om bolaget bryter upp ur en konsolideringsfas
        * Starkt om bolaget handlas till sin h칬gsta 52-veckorsniv친
        
        Strategin f칬ljer principen "Rid vinnarna och s칛lj f칬rlorarna". Vid brott under MA40, s칛lj direkt eller bevaka h친rt. Ta f칬rluster tidigt.
        """)

    st.sidebar.markdown("---")
    st.sidebar.markdown("**Utvecklad med Python och Streamlit**")


if __name__ == "__main__":
    create_streamlit_app()